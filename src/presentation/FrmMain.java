package presentation;

import domaine.Commande;
import domaine.Employe;
import java.text.DecimalFormat;
import metier.ListeEmployes;
import metier.ListeCommandes;

/**
 * 634.1 - Programmation - TP P02
 *
 * Application de gestion des commandes de capsules de café.
 *
 * Écran principal
 *
 * @author LKABOUSSE
 * @version 1.0
 */
public final class FrmMain extends java.awt.Frame {

    private ListeEmployes listeEmployes; 
    private ListeCommandes listeCommandes;
    private static final DecimalFormat FORMAT = new DecimalFormat("#0.00 CHF");
    private static final String LBL_COMMANDEDE = "Commande de ";
    /**
     * Constructeur
     */
    public FrmMain() {
        initComponents();
        chargerEmployes();
        lstEmployes.select(0);
        listeEmployes.setPos(0);
        afficherCommandes();
        prixTotal();
        chargerLabel();
    } // Constructeur

    private void chargerEmployes() {
        listeEmployes = new ListeEmployes();
        for (int i = 0; i < listeEmployes.size(); i++) {
            Employe e = (Employe) listeEmployes.getEmploye(i);
            lstEmployes.add(e.getNom() + " " + e.getPrenom());
        }
    }//chargerEmployes
    
    /* Chargement du label dédié à l'employé sélectionné */
    public void chargerLabel(){
        int indexEmploye = lstEmployes.getSelectedIndex();
        listeEmployes.setPos(indexEmploye);
        String nomPrenom = listeEmployes.getEmployeCourant().toString();
        lblCommandes.setText(LBL_COMMANDEDE + nomPrenom);
    }//chargerLabel
    
    /* Affichage des commandes sur la base de la liste des employés */
    public void afficherCommandes(){
        lstCommandes.removeAll();
        int indexEmploye = lstEmployes.getSelectedIndex();
        Employe e = (Employe)listeEmployes.getEmploye(indexEmploye);
        listeCommandes = new ListeCommandes(e);
        for (int i = 0; i < listeCommandes.size(); i++) {
            Commande comm = (Commande)listeCommandes.getCommande(i);
            lstCommandes.add(comm.toString());
            prixTotal();
        }
        if (listeCommandes.size() == 0) {
            lstCommandes.add("<aucune>");
        }
    }//afficherCommandes
    
    /* Calcul du prix total de la commande de chaque employé */
    private void prixTotal(){
        double prix = 0;
        for (int i = 0; i < listeCommandes.size(); i++) {
            Commande comm = (Commande)listeCommandes.getCommande(i);
            prix = prix + comm.getPrix();
        }
        tfTotal.setText(FORMAT.format(prix));
    }//prixTotal
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        lstEmployes = new java.awt.List();
        lblCommandes = new java.awt.Label();
        lstCommandes = new java.awt.List();
        label2 = new java.awt.Label();
        tfTotal = new java.awt.TextField();
        btnCompleter = new java.awt.Button();

        setResizable(false);
        setTitle("Commandes de capsules de café");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        label1.setText("Employés");

        lstEmployes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lstEmployesItemStateChanged(evt);
            }
        });

        lblCommandes.setText("Commandes de ...");

        lstCommandes.setEnabled(false);

        label2.setText("Total de la commande");

        tfTotal.setEditable(false);

        btnCompleter.setLabel("Compléter la commande");
        btnCompleter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lstEmployes, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(tfTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblCommandes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCompleter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lstCommandes, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCommandes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lstEmployes, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lstCommandes, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCompleter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Fermeture de la fenêtre */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void lstEmployesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lstEmployesItemStateChanged
        chargerLabel();
        afficherCommandes();
        prixTotal();
    }//GEN-LAST:event_lstEmployesItemStateChanged

    private void btnCompleterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleterActionPerformed
        FrmNouvelleCommande.getInstance(this, listeEmployes.getEmployeCourant()).setVisible(true);
    }//GEN-LAST:event_btnCompleterActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnCompleter;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label lblCommandes;
    private java.awt.List lstCommandes;
    private java.awt.List lstEmployes;
    private java.awt.TextField tfTotal;
    // End of variables declaration//GEN-END:variables

} // FrmMain
