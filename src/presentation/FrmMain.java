package presentation;

import base.CommandeDao;
import base.ConnexionBase;
import domaine.Commande;
import domaine.Employe;
import java.text.DecimalFormat;
import metier.ListeCommandes;
import metier.ListeEmployes;

/**
 * Module 634.1-Programmation - TP P02
 * 
 * Application de gestion des commandes de capsules de café.
 * 
 * Écran principal
 *
 * @author Peter DAEHNE - HEG Genève
 * @version 2.1
 */
public class FrmMain extends java.awt.Frame {
  
    private static final DecimalFormat FORMAT = new DecimalFormat("#0.00 CHF");
    private static final String COMMANDES_DE = "Commandes de ";
    private static final String AUCUNE = "<Aucune>";

    private ListeEmployes listeEmployes;   /* Modèle pour la liste des employés */
    private ListeCommandes listeCommandes; /* Modèle pour la liste des commandes */

    /** Constructeur */
    public FrmMain () {
        initComponents();
        chargerEmployes();
    } // Constructeur

    /* Sélection d'un employé: chargement de ses commandes. */
    private void selectEmploye (int pos) {
        listeEmployes.setPos(pos); lstEmployes.select(pos);
        Employe e = listeEmployes.getEmployeCourant();
        lblCommandes.setText(COMMANDES_DE + e);
        chargerCommandes(e);
    } // selectEmploye

    /* Chargement des employés dans l'ordre des nom et prenom et sélection du premier */
    private void chargerEmployes () {
        listeEmployes = new ListeEmployes();
        for (int k = 0; k < listeEmployes.size(); k++) {lstEmployes.add(listeEmployes.getEmploye(k).toString());}
        selectEmploye(0);
    } // chargerEmployes
    
    /* Retourne la somme représentée par les commandes du modèle (listeCommandes) */
    private double sommeCommandes () {
        double somme = 0;
        for (int k = 0; k < listeCommandes.size(); k++) {somme += listeCommandes.getCommande(k).getPrix();}
        return somme;
    } // sommeCommandes

    /* Actualisation de la vue représentant les commandes (lstCommandes & somme) */
    private void actualiserVueCommandes () {
        lstCommandes.removeAll();
        if (listeCommandes.size() == 0) {
            lstCommandes.add(AUCUNE);
        } else {
            for (int k = 0; k < listeCommandes.size(); k++) {lstCommandes.add(listeCommandes.getCommande(k).toString());}
        }
        tfTotal.setText(FORMAT.format(sommeCommandes()));
    } // actualiserVueCommandes
    
    /* Chargement des commandes pour l'employé emp */
    private void chargerCommandes (Employe emp) {
        listeCommandes = new ListeCommandes(emp);
        actualiserVueCommandes();
    } // chargerCommandes

    /** Enregistrer la nouvelle commande */
    public void enregistreCommande (Commande commande) {
        CommandeDao.enregistreCommande(commande);
        if (commande.getEmploye().equals(listeEmployes.getEmployeCourant())) {
            listeCommandes.add(commande);
            actualiserVueCommandes();
        }
    } // enregistreCommande

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method
     * is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        lstEmployes = new java.awt.List();
        lblCommandes = new java.awt.Label();
        lstCommandes = new java.awt.List();
        label2 = new java.awt.Label();
        tfTotal = new java.awt.TextField();
        btnCompleter = new java.awt.Button();

        setResizable(false);
        setTitle("Commandes de capsules de café");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        label1.setText("Employés");

        lstEmployes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lstEmployesItemStateChanged(evt);
            }
        });

        lblCommandes.setText("Commandes de ...");

        lstCommandes.setEnabled(false);

        label2.setText("Total de la commande");

        tfTotal.setEditable(false);

        btnCompleter.setLabel("Compléter la commande");
        btnCompleter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lstEmployes, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(tfTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblCommandes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCompleter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lstCommandes, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCommandes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lstEmployes, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lstCommandes, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCompleter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Fermeture de la fenêtre */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        ConnexionBase.close();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
    }//GEN-LAST:event_formWindowClosing

    /* Un employé a été sélectionné */
    private void lstEmployesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lstEmployesItemStateChanged
        selectEmploye(lstEmployes.getSelectedIndex());
    }//GEN-LAST:event_lstEmployesItemStateChanged

    /* L'utilisateur a demandé à compléter la commande pour l'employé sélectionné */
    private void btnCompleterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleterActionPerformed
        FrmNouvelleCommande frmNouvelleCommande = FrmNouvelleCommande.getInstance(this);
        frmNouvelleCommande.setVisible(true);
        frmNouvelleCommande.setEmploye(listeEmployes.getEmployeCourant());
    }//GEN-LAST:event_btnCompleterActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnCompleter;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label lblCommandes;
    private java.awt.List lstCommandes;
    private java.awt.List lstEmployes;
    private java.awt.TextField tfTotal;
    // End of variables declaration//GEN-END:variables

} // FrmMain
